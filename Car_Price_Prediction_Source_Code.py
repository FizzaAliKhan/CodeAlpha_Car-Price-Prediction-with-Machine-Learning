# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yL9wqwHWwB_m1snS9kro3axCePfkedtk
"""

# Step 1: Creating a  car dataset
np.random.seed(42)

#features
n_samples = 1000
brand_goodwill = np.random.uniform(1, 10, n_samples)  # Brand goodwill (1-10 scale)
horsepower = np.random.uniform(100, 600, n_samples)  # Horsepower
mileage = np.random.uniform(10, 40, n_samples)  # Mileage (mpg)
engine_size = np.random.uniform(1.0, 6.0, n_samples)  # Engine size (liters)
car_age = np.random.randint(0, 20, n_samples)  # Age of the car (years)
car_type = np.random.choice(['Sedan', 'SUV', 'Hatchback', 'Convertible', 'Coupe'], n_samples)  # Car type

#car price target (with some noise)
base_price = 20000  # Base price of a car
price = (base_price + 1000 * brand_goodwill + 200 * horsepower -
         300 * mileage + 5000 * engine_size - 500 * car_age +
         np.random.normal(0, 2000, n_samples))

# Creating a DataFrame
car_data = pd.DataFrame({
    'brand_goodwill': brand_goodwill,
    'horsepower': horsepower,
    'mileage': mileage,
    'engine_size': engine_size,
    'car_age': car_age,
    'car_type': car_type,
    'price': price
})

# Step 2: Preprocessing
# Convert categorical 'car_type' into numerical values using one-hot encoding
car_data = pd.get_dummies(car_data, columns=['car_type'], drop_first=True)

# Step 3: Feature Selection
# All features are relevant, no further selection needed.

# Step 4: Train-Test Split
X_car = car_data.drop('price', axis=1)
y_car = car_data['price']
X_train_car, X_test_car, y_train_car, y_test_car = train_test_split(X_car, y_car, test_size=0.2, random_state=42)

# Step 5: Model Selection - RandomForestRegressor
car_price_model = RandomForestRegressor(n_estimators=100, random_state=42)

# Step 6: Training the model
car_price_model.fit(X_train_car, y_train_car)

# Step 7: Prediction
y_pred_car = car_price_model.predict(X_test_car)

# Step 8: Model Evaluation
mae_car = mean_absolute_error(y_test_car, y_pred_car)
mse_car = mean_squared_error(y_test_car, y_pred_car)
r2_car = r2_score(y_test_car, y_pred_car)

mae_car, mse_car, r2_car